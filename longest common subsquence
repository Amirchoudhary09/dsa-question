class Solution {
public:
int n,m;
vector<vector<int>>dp;
/***---- this approach recursive  with dp --****/
// int lcs(string &f, string &s,int i,int j){
//     if(i>=n||j>=m){
//         return 0;
//     }
//     if(dp[i][j]!=-1){
//         return dp[i][j];
//     }
//     int take=0;
//     if(f[i]==s[j]){
//          take =1+lcs(f,s,i+1,j+1);
//     }
//     int skip=lcs(f,s,i+1,j);
//     int skip1=lcs(f,s,i,j+1);
//     int m=max(skip,skip1);
//     return  dp[i][j]=max(take,m);
// }
    int longestCommonSubsequence(string s, string s1) {
        n=s.size();
        m=s1.size();
        // memset(dp,-1,sizeof(dp));
        dp.assign(n+1,vector<int>(m+1,0));
        // return lcs(s,ts1,0,0);
        
            /****----- this aparoach bottom up apraoch  --****/
            for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {
            if(s[i - 1] == s1[j - 1]) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
     int i=n,j=m;
     string ans="";
     while(i>0&&j>0){
        if(s[i]==s1[j]){
            ans +=s[i-1];
            i--;
            j--;
        }else if (dp[i-1][j]>dp[i][j-1]){
            i--;
        }else{
            j--;
        }
     }
     cout<<ans<<endl;
    return dp[n][m];
    }
};
